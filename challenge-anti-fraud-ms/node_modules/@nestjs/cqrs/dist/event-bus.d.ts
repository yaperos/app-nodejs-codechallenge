import { OnModuleDestroy, Type } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import { Observable, Subscription } from 'rxjs';
import { CommandBus } from './command-bus';
import { IEvent, IEventBus, IEventHandler, IEventPublisher, ISaga } from './interfaces';
import { ObservableBus } from './utils';
export declare type EventHandlerType<EventBase extends IEvent = IEvent> = Type<IEventHandler<EventBase>>;
export declare class EventBus<EventBase extends IEvent = IEvent> extends ObservableBus<EventBase> implements IEventBus<EventBase>, OnModuleDestroy {
    private readonly commandBus;
    private readonly moduleRef;
    protected getEventId: (event: EventBase) => string | null;
    protected readonly subscriptions: Subscription[];
    private _publisher;
    private readonly _logger;
    constructor(commandBus: CommandBus, moduleRef: ModuleRef);
    get publisher(): IEventPublisher<EventBase>;
    set publisher(_publisher: IEventPublisher<EventBase>);
    onModuleDestroy(): void;
    publish<T extends EventBase>(event: T): any;
    publishAll<T extends EventBase>(events: T[]): any;
    bind(handler: IEventHandler<EventBase>, id: string): void;
    registerSagas(types?: Type<unknown>[]): void;
    register(handlers?: EventHandlerType<EventBase>[]): void;
    protected registerHandler(handler: EventHandlerType<EventBase>): void;
    protected ofEventId(id: string): Observable<EventBase>;
    protected registerSaga(saga: ISaga<EventBase>): void;
    private reflectEvents;
    private useDefaultPublisher;
}
